#############################
# Tarasov 2019
# Template for PARAMO pipeline
#
#
#############################

#######################
# Reading in the Data #
#######################

# names to declare
analysis_name = "@analysis_name@"
tree_2_read= "data/Hymenoptera_br_resolved.tre"
chrs_2_read= "@chrs_2_read@"


# variables to be predifined in this template
mcmc_gen = 10000
#burnin_gen = 2000
log_freq = 100

#seed(2555)

# moves and monitors
mvi = 0
mni = 0

# variable obtained from scipt
NUM_STATES = @numstates@
# arg of readCharacterDataDelimited()


# Read in the character data
char_data = readCharacterDataDelimited(chrs_2_read, type="NaturalNumbers", delimiter=" ", stateLabels = NUM_STATES, headers=false)
# Read in tree
psi = readTrees(tree_2_read)[1]




#######################
# Character Evolution Model
#######################

# declare rate matrix
@ratematrix@

###############
# create the model
###############
morpho_ctmc ~ dnPhyloCTMC(Q=rate_matrix, tree=psi, rootFreq=root_freq, branchRates=1.0, type="NaturalNumbers")

# clamp data
morpho_ctmc.clamp(char_data)

### workspace model wrapper ###
mymodel = model(rate_matrix)

# create the monitors
# model param to file monitor
monitors[++mni] = mnModel(filename="output/" + analysis_name + ".log", printgen=log_freq)
# model param to screen monitor
monitors[++mni] = mnScreen(printgen=log_freq)
# tree monitor fro treetrace awith Stocj mapping
#monitors[++mni] = mnFile(filename="output/mk1.trees", printgen=10, psi)
monitors[++mni] = mnJointConditionalAncestralState(filename="output/" + analysis_name + ".asr", printgen=1000, tree=psi, ctmc=morpho_ctmc, type="NaturalNumbers")
# Stoch mapping monitor
monitors[++mni]= mnStochasticCharacterMap(ctmc=morpho_ctmc, filename="output/" + analysis_name + ".stm", printgen=1000)


###############
# run MCMC analysis
###############
mymcmc = mcmc(mymodel, monitors, moves, nruns=1, moveschedule="random")

### pre-burnin to tune the proposals
mymcmc.burnin(generations=3000, tuningInterval=1000)

### run the MCMC
mymcmc.run(mcmc_gen)

mymcmc.operatorSummary()


#######################################
